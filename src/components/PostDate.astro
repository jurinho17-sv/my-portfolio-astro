---
import { themeConfig } from '@/config'
import { isPostPage } from '@/utils/page'

interface Props {
  date: Date
  updatedDate?: Date
  minutes: number
}

const { date, updatedDate, minutes } = Astro.props
const format = themeConfig.global.dateFormat
const isPost = isPostPage(Astro.url.pathname)
const timeSpacingClass = isPost ? 'ml-1.75' : 'ml-1.5'

function formatDate(date: Date, format: 'YYYY-MM-DD' | 'MM-DD-YYYY' | 'DD-MM-YYYY' | 'MONTH DAY YYYY' | 'DAY MONTH YYYY') {
  if (format === 'YYYY-MM-DD') {
    return date.toISOString().split('T')[0]
  }

  const options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: format === 'MONTH DAY YYYY' || format === 'DAY MONTH YYYY' ? 'short' : '2-digit',
    day: format === 'MONTH DAY YYYY' || format === 'DAY MONTH YYYY' ? 'numeric' : '2-digit',
    timeZone: 'UTC',
  }

  switch (format) {
    // US date format: 04-13-2025
    case 'MM-DD-YYYY':
      return date.toLocaleDateString('en-US', options).replace(/\//g, '-')

    // European date format: 13-04-2025
    case 'DD-MM-YYYY':
      return date.toLocaleDateString('en-GB', options).replace(/\//g, '-')

    // US month text format: Apr 13 2025
    case 'MONTH DAY YYYY':
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        timeZone: 'UTC',
      }).replace(',', '')

    // British month text format: 13 Apr 2025
    case 'DAY MONTH YYYY':
      return date.toLocaleDateString('en-GB', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        timeZone: 'UTC',
      }).replace(',', '')

    // Default to ISO format
    default:
      return date.toISOString().split('T')[0]
  }
}

// Simple relative time function for blog posts
function getRelativeTimeString(date: Date): string {
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  
  // Today
  if (diffDays === 0) {
    return "Today";
  }
  
  // 1 day ago
  if (diffDays === 1) {
    return "1 day ago";
  }
  
  // 2-6 days ago
  if (diffDays <= 6) {
    return `${diffDays} days ago`;
  }
  
  // Week calculations
  const diffWeeks = Math.floor(diffDays / 7);
  
  // 1 week ago
  if (diffWeeks === 1) {
    return "1 week ago";
  }
  
  // 2-3 weeks ago  
  if (diffWeeks <= 3) {
    return `${diffWeeks} weeks ago`;
  }
  
  // Month calculations
  const diffMonths = Math.floor(diffDays / 30);
  
  // 1 month ago
  if (diffMonths === 1) {
    return "1 month ago";
  }
  
  // 2-11 months ago
  if (diffMonths <= 11) {
    return `${diffMonths} months ago`;
  }
  
  // Year calculations
  const diffYears = Math.floor(diffDays / 365);
  
  // 1 year ago
  if (diffYears === 1) {
    return "1 year ago";
  }
  
  // 2+ years ago
  return `${diffYears} years ago`;
}
---

<!-- published date -->
<time datetime={date.toISOString().split('T')[0]}>
  {formatDate(date, format)}
</time>

<!-- updated date -->
{updatedDate && (
  <time
    datetime={updatedDate.toISOString().split('T')[0]}
    class={timeSpacingClass}
  >
    updated {formatDate(updatedDate, format)}
  </time>
)}

<!-- relative time -->
<span class={timeSpacingClass} data-relative-time={date.toISOString()}>
  {getRelativeTimeString(date)}
</span>

<script>
  // Update relative time every 24 hours for accuracy
  function updateRelativeTime() {
    const elements = document.querySelectorAll('[data-relative-time]');
    
    elements.forEach(element => {
      const dateString = element.getAttribute('data-relative-time');
      if (dateString) {
        const date = new Date(dateString);
        element.textContent = getRelativeTimeString(date);
      }
    });
  }

  // Simple relative time function for client-side updates
  function getRelativeTimeString(date: Date): string {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "1 day ago";
    if (diffDays <= 6) return `${diffDays} days ago`;
    
    const diffWeeks = Math.floor(diffDays / 7);
    if (diffWeeks === 1) return "1 week ago";
    if (diffWeeks <= 3) return `${diffWeeks} weeks ago`;
    
    const diffMonths = Math.floor(diffDays / 30);
    if (diffMonths === 1) return "1 month ago";
    if (diffMonths <= 11) return `${diffMonths} months ago`;
    
    const diffYears = Math.floor(diffDays / 365);
    if (diffYears === 1) return "1 year ago";
    return `${diffYears} years ago`;
  }

  // Update on page load
  document.addEventListener('DOMContentLoaded', updateRelativeTime);
  
  // Update every 24 hours (86400000 ms)
  setInterval(updateRelativeTime, 86400000);
</script>
